// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//    mockgen -source interface.go -destination=./mock/interfaceMock.go
// Package mock_healthRepository is a generated GoMock package.
package mock_healthRepository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	healthRepository "manntera.com/health-tracker-api/pkg/repository/healthRepository"
)

// MockIHealthRepository is a mock of IHealthRepository interface.
type MockIHealthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIHealthRepositoryMockRecorder
}

// MockIHealthRepositoryMockRecorder is the mock recorder for MockIHealthRepository.
type MockIHealthRepositoryMockRecorder struct {
	mock *MockIHealthRepository
}

// NewMockIHealthRepository creates a new mock instance.
func NewMockIHealthRepository(ctrl *gomock.Controller) *MockIHealthRepository {
	mock := &MockIHealthRepository{ctrl: ctrl}
	mock.recorder = &MockIHealthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHealthRepository) EXPECT() *MockIHealthRepositoryMockRecorder {
	return m.recorder
}

// AddData mocks base method.
func (m *MockIHealthRepository) AddData(ctx context.Context, userId string, timestamp int64, healthScore int, comment, medicineName string) (*healthRepository.Health, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddData", ctx, userId, timestamp, healthScore, comment, medicineName)
	ret0, _ := ret[0].(*healthRepository.Health)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddData indicates an expected call of AddData.
func (mr *MockIHealthRepositoryMockRecorder) AddData(ctx, userId, timestamp, healthScore, comment, medicineName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddData", reflect.TypeOf((*MockIHealthRepository)(nil).AddData), ctx, userId, timestamp, healthScore, comment, medicineName)
}

// DeleteData mocks base method.
func (m *MockIHealthRepository) DeleteData(ctx context.Context, userId, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", ctx, userId, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockIHealthRepositoryMockRecorder) DeleteData(ctx, userId, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockIHealthRepository)(nil).DeleteData), ctx, userId, uuid)
}

// GetDataFromTime mocks base method.
func (m *MockIHealthRepository) GetDataFromTime(ctx context.Context, userId string, startTime, endTime int64) ([]healthRepository.Health, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataFromTime", ctx, userId, startTime, endTime)
	ret0, _ := ret[0].([]healthRepository.Health)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataFromTime indicates an expected call of GetDataFromTime.
func (mr *MockIHealthRepositoryMockRecorder) GetDataFromTime(ctx, userId, startTime, endTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFromTime", reflect.TypeOf((*MockIHealthRepository)(nil).GetDataFromTime), ctx, userId, startTime, endTime)
}

// GetDataFromUuid mocks base method.
func (m *MockIHealthRepository) GetDataFromUuid(ctx context.Context, userId, uuid string) (*healthRepository.Health, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataFromUuid", ctx, userId, uuid)
	ret0, _ := ret[0].(*healthRepository.Health)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataFromUuid indicates an expected call of GetDataFromUuid.
func (mr *MockIHealthRepositoryMockRecorder) GetDataFromUuid(ctx, userId, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFromUuid", reflect.TypeOf((*MockIHealthRepository)(nil).GetDataFromUuid), ctx, userId, uuid)
}
